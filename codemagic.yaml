workflows:
  ios_appstore_manual_signing:
    name: iOS App Store Manual signing
    max_build_duration: 60

    environment:
      groups:
        - signing            # CERTIFICATE_P12, CERTIFICATE_PASSWORD, MOBILEPROVISION
        - appstore_connect   # APP_STORE_CONNECT_ISSUER_ID, APP_STORE_CONNECT_KEY_IDENTIFIER, APP_STORE_CONNECT_PRIVATE_KEY
      vars:
        XCODE_PROJECT: "Trackify.xcodeproj"
        XCODE_SCHEME: "Trackify"
        BUNDLE_ID: "dev.annebunas.trackifyrrrr"
        TEAM_ID: "OVERRIDE_BY_PROFILE"   # будет заменён на значение из профиля
        EXPORT_METHOD: "app-store"

    scripts:
      - name: Import certificate and profile
        script: |
          set -euo pipefail

          echo "$CERTIFICATE_P12" | base64 --decode > cert.p12
          echo "$MOBILEPROVISION" | base64 --decode > profile.mobileprovision

          # Keychain + certificate
          keychain initialize
          if [ -n "${CERTIFICATE_PASSWORD:-}" ]; then
            keychain add-certificates --certificate cert.p12 --certificate-password "$CERTIFICATE_PASSWORD"
          else
            keychain add-certificates --certificate cert.p12
          fi

          # Install provisioning profile and read UUID + TeamIdentifier
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_PLIST="$(security cms -D -i profile.mobileprovision)"
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< "$PROFILE_PLIST")
          PROFILE_TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print TeamIdentifier:0' /dev/stdin <<< "$PROFILE_PLIST")

          cp profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"
          echo "Using Provisioning Profile UUID: $PROFILE_UUID"
          echo "TeamIdentifier from profile: $PROFILE_TEAM_ID"

          # export to env for next steps
          echo "PROFILE_UUID=$PROFILE_UUID" >> "$CM_ENV"
          echo "TEAM_ID=$PROFILE_TEAM_ID"   >> "$CM_ENV"

          # Diagnostics (не ломают билд)
          echo "== Code signing identities in keychain =="
          security find-identity -v -p codesigning || true

          # Valid exportOptions.plist (XML)
          cat > exportOptions.plist <<EOI
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>${EXPORT_METHOD}</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_UUID}</string>
            </dict>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
            <key>destination</key><string>export</string>
          </dict>
          </plist>
          EOI
          /usr/bin/plutil -lint exportOptions.plist

          # Apply profile into the project for manual signing
          xcode-project use-profiles --project "$XCODE_PROJECT" --export-options-plist exportOptions.plist

      - name: Archive and export IPA (xcodebuild)
        script: |
          set -euo pipefail

          ARCHIVE_PATH="$CM_BUILD_DIR/Trackify.xcarchive"
          EXPORT_PATH="$CM_EXPORT_DIR"

          echo "Archiving to: $ARCHIVE_PATH"
          xcodebuild \
            -project "$XCODE_PROJECT" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -archivePath "$ARCHIVE_PATH" \
            archive \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            COMPILER_INDEX_STORE_ENABLE=NO

          echo "Exporting IPA to: $EXPORT_PATH"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$EXPORT_PATH"

          echo "Export dir listing:"
          ls -lah "$EXPORT_PATH" || true

          # Упадём явно, если .ipa не создана (чтобы не было 'No artifacts were found')
          test -e "$EXPORT_PATH"/*.ipa

    artifacts:
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.dSYM.zip
      - $CM_EXPORT_DIR/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true

          - name: Bump build number (and optional app version)
  script: |
    set -euo pipefail

    # 1) Определяем проект/воркспейс
    if [ -n "${XCODE_WORKSPACE:-}" ]; then
      PROJ_ARGS=(-workspace "$XCODE_WORKSPACE")
    elif [ -n "${XCODE_PROJECT:-}" ]; then
      PROJ_ARGS=(-project "$XCODE_PROJECT")
    elif compgen -G "*.xcworkspace" >/dev/null; then
      ws=$(ls -1 *.xcworkspace | head -n1)
      PROJ_ARGS=(-workspace "$ws")
    else
      pr=$(ls -1 *.xcodeproj | head -n1)
      PROJ_ARGS=(-project "$pr")
    fi

    # 2) Определяем схему (если не задана)
    if [ -z "${XCODE_SCHEME:-}" ]; then
      # Попробуем вытащить первую схему из xcodebuild -list -json
      schemes=$(xcodebuild "${PROJ_ARGS[@]}" -list -json 2>/dev/null \
        | /usr/bin/python3 - <<'PY'
import sys, json
try:
    d=json.load(sys.stdin)
    p=d.get("workspace", d.get("project", {}))
    print("\n".join(p.get("schemes", [])))
except Exception:
    pass
PY
      )
      XCODE_SCHEME=$(echo "$schemes" | head -n1 || true)
    fi

    if [ -z "${XCODE_SCHEME:-}" ]; then
      echo "❌ Не удалось определить XCODE_SCHEME. Укажи его в env или в codemagic.yaml."
      exit 1
    fi

    # 3) Получаем значения из build settings
    SETTINGS=$(xcodebuild "${PROJ_ARGS[@]}" -scheme "$XCODE_SCHEME" -showBuildSettings)
    SRCROOT=$(echo "$SETTINGS" | awk -F' = ' '/^ *SRCROOT / {print $2; exit}')
    INFOPLIST_FILE=$(echo "$SETTINGS" | awk -F' = ' '/^ *INFOPLIST_FILE / {print $2; exit}')

    # 4) Разворачиваем путь к Info.plist
    case "$INFOPLIST_FILE" in
      /*) PLIST_PATH="$INFOPLIST_FILE" ;;
      \$\(SRCROOT\)*)
        PLIST_PATH="${INFOPLIST_FILE/\$(SRCROOT)/$SRCROOT}"
        ;;
      *)
        PLIST_PATH="$SRCROOT/$INFOPLIST_FILE"
        ;;
    esac
    echo "Info.plist: $PLIST_PATH"
    [ -f "$PLIST_PATH" ] || { echo "❌ Info.plist не найден по пути: $PLIST_PATH"; exit 1; }

    # 5) (опц.) маркетинговая версия
    if [ -n "${APP_VERSION:-}" ]; then
      /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $APP_VERSION" "$PLIST_PATH" || \
      /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string $APP_VERSION" "$PLIST_PATH"
    fi

    # 6) Уникальный build number (или берём из APP_BUILD)
    if [ -n "${APP_BUILD:-}" ]; then
      BUILD_NUM="$APP_BUILD"
    else
      BUILD_NUM=$(date +%y%j%H%M%S)  # YY DDD HH MM SS — точно уникально поминутно/посекундно
    fi
    /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUM" "$PLIST_PATH" || \
    /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $BUILD_NUM" "$PLIST_PATH"

    # 7) Валидация и вывод
    /usr/bin/plutil -lint "$PLIST_PATH"
    echo "== Final versions =="
    echo "CFBundleShortVersionString=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' "$PLIST_PATH" 2>/dev/null || echo '(unchanged)')"
    echo "CFBundleVersion=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' "$PLIST_PATH")"
