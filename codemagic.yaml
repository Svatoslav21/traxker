workflows:
  ios_appstore_manual_signing:
    name: iOS App Store Manual signing
    max_build_duration: 60

    environment:
      groups:
        - signing
        - appstore_connect
      vars:
        XCODE_PROJECT: "Trackify.xcodeproj"
        XCODE_SCHEME: "Trackify"
        BUNDLE_ID: "dev.annebunas.trackifyrrrr"
        TEAM_ID: "OVERRIDE_BY_PROFILE"   # будет заменён на значение из профиля
        EXPORT_METHOD: "app-store"

    scripts:
      - name: Import certificate and profile
        script: |
          set -euo pipefail

          echo "$CERTIFICATE_P12" | base64 --decode > cert.p12
          echo "$MOBILEPROVISION" | base64 --decode > profile.mobileprovision

          keychain initialize
          if [ -n "${CERTIFICATE_PASSWORD:-}" ]; then
            keychain add-certificates --certificate cert.p12 --certificate-password "$CERTIFICATE_PASSWORD"
          else
            keychain add-certificates --certificate cert.p12
          fi

          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          PROFILE_PLIST="$(security cms -D -i profile.mobileprovision)"
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print UUID' /dev/stdin <<< "$PROFILE_PLIST")
          PROFILE_TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print TeamIdentifier:0' /dev/stdin <<< "$PROFILE_PLIST")

          cp profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"
          echo "Using Provisioning Profile UUID: $PROFILE_UUID"
          echo "TeamIdentifier from profile: $PROFILE_TEAM_ID"

          echo "PROFILE_UUID=$PROFILE_UUID" >> "$CM_ENV"
          echo "TEAM_ID=$PROFILE_TEAM_ID"   >> "$CM_ENV"

          echo "== Code signing identities in keychain =="
          security find-identity -v -p codesigning || true

          cat > exportOptions.plist <<EOI
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>method</key><string>${EXPORT_METHOD}</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>signingStyle</key><string>manual</string>
            <key>provisioningProfiles</key><dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_UUID}</string>
            </dict>
            <key>compileBitcode</key><false/>
            <key>stripSwiftSymbols</key><true/>
            <key>destination</key><string>export</string>
          </dict></plist>
          EOI
          /usr/bin/plutil -lint exportOptions.plist

          xcode-project use-profiles --project "$XCODE_PROJECT" --export-options-plist exportOptions.plist

      - name: Bump build (and optional marketing version) — bash3-safe
        script: |
          set -euo pipefail

          # 0) Параметры проекта
          if [ -n "${XCODE_WORKSPACE:-}" ]; then
            PROJ_ARGS=(-workspace "$XCODE_WORKSPACE")
          else
            PROJ_ARGS=(-project "${XCODE_PROJECT:?Set XCODE_PROJECT or XCODE_WORKSPACE}")
          fi
          : "${XCODE_SCHEME:?Set XCODE_SCHEME}"
          : "${BUNDLE_ID:?Set BUNDLE_ID}"

          # 1) SRCROOT и (если повезет) INFOPLIST_FILE из build settings
          SETTINGS=$(xcodebuild "${PROJ_ARGS[@]}" -scheme "$XCODE_SCHEME" -configuration Release -showBuildSettings || true)
          SRCROOT=$(echo "$SETTINGS" | sed -n 's/^[[:space:]]*SRCROOT = \(.*\)$/\1/p' | head -n1)
          INFOPLIST_FILE_RAW=$(echo "$SETTINGS" | sed -n 's/^[[:space:]]*INFOPLIST_FILE = \(.*\)$/\1/p' | head -n1)
          SRCROOT=${SRCROOT:-"$PWD"}

          # 2) Сборка кандидата по INFOPLIST_FILE (если есть)
          PLIST=""
          if [ -n "${INFOPLIST_FILE_RAW:-}" ]; then
            case "$INFOPLIST_FILE_RAW" in
              /*) p="$INFOPLIST_FILE_RAW" ;;
              '$'(SRCROOT)*) p="${INFOPLIST_FILE_RAW/\$(SRCROOT)/$SRCROOT}" ;;
              *) p="$SRCROOT/$INFOPLIST_FILE_RAW" ;;
            esac
            [ -f "$p" ] && PLIST="$p"
          fi

          # 3) Поиск *Info.plist с нужным CFBundleIdentifier (несколько проходов)

          # A) точное совпадение CFBundleIdentifier == BUNDLE_ID
          if [ -z "$PLIST" ]; then
            while IFS= read -r -d '' f; do
              id=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$f" 2>/dev/null || true)
              if [ "$id" = "$BUNDLE_ID" ]; then PLIST="$f"; break; fi
            done < <(find "$SRCROOT" -type f -name "*Info.plist" -print0 2>/dev/null)
          fi

          # B) CFBundleIdentifier содержит $(PRODUCT_BUNDLE_IDENTIFIER)
          if [ -z "$PLIST" ]; then
            while IFS= read -r -d '' f; do
              id=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "$f" 2>/dev/null || true)
              case "$id" in *'$(PRODUCT_BUNDLE_IDENTIFIER)'*) PLIST="$f"; break;; esac
            done < <(find "$SRCROOT" -type f -name "*Info.plist" -print0 2>/dev/null)
          fi

          # C) путь содержит имя схемы (и не из .appex)
          if [ -z "$PLIST" ]; then
            while IFS= read -r -d '' f; do
              case "$f" in *.appex/*) ;; *"$XCODE_SCHEME"*/Info.plist) PLIST="$f"; break;; esac
            done < <(find "$SRCROOT" -type f -name "*Info.plist" -print0 2>/dev/null)
          fi

          # D) первый plist не из .appex
          if [ -z "$PLIST" ]; then
            while IFS= read -r -d '' f; do
              case "$f" in *.appex/*) ;; *) PLIST="$f"; break;; esac
            done < <(find "$SRCROOT" -type f -name "*Info.plist" -print0 2>/dev/null)
          fi

          [ -n "$PLIST" ] && [ -f "$PLIST" ] || { echo "❌ Не удалось найти *Info.plist для $BUNDLE_ID"; exit 1; }
          echo "✅ Using Info.plist: $PLIST"

          # (опц.) маркетинговая версия из APP_VERSION
          if [ -n "${APP_VERSION:-}" ]; then
            /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString $APP_VERSION" "$PLIST" \
              || /usr/libexec/PlistBuddy -c "Add :CFBundleShortVersionString string $APP_VERSION" "$PLIST"
          fi

          # Build — уникальный timestamp (только цифры)
          BUILD_NUM=$(date +%y%j%H%M%S)
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion $BUILD_NUM" "$PLIST" \
            || /usr/libexec/PlistBuddy -c "Add :CFBundleVersion string $BUILD_NUM" "$PLIST"

          /usr/bin/plutil -lint "$PLIST"
          echo "== Final versions =="
          echo "CFBundleShortVersionString=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleShortVersionString' "$PLIST" 2>/dev/null || echo '(unchanged)')"
          echo "CFBundleVersion=$(/usr/libexec/PlistBuddy -c 'Print :CFBundleVersion' "$PLIST")"

      - name: Archive and export IPA (xcodebuild)
        script: |
          set -euo pipefail
          ARCHIVE_PATH="$CM_BUILD_DIR/Trackify.xcarchive"
          EXPORT_PATH="$CM_EXPORT_DIR"

          echo "Archiving to: $ARCHIVE_PATH"
          xcodebuild \
            -project "$XCODE_PROJECT" \
            -scheme "$XCODE_SCHEME" \
            -configuration Release \
            -archivePath "$ARCHIVE_PATH" \
            archive \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            CODE_SIGN_STYLE=Manual \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_UUID" \
            CODE_SIGN_IDENTITY="Apple Distribution" \
            COMPILER_INDEX_STORE_ENABLE=NO

          echo "Exporting IPA to: $EXPORT_PATH"
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportOptionsPlist exportOptions.plist \
            -exportPath "$EXPORT_PATH"

          echo "Export dir listing:"
          ls -lah "$EXPORT_PATH" || true
          test -e "$EXPORT_PATH"/*.ipa

    artifacts:
      - $CM_EXPORT_DIR/*.ipa
      - $CM_EXPORT_DIR/*.dSYM.zip
      - $CM_EXPORT_DIR/*.xcarchive

    publishing:
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
